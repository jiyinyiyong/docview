
`#柳线#`是设想文本和代码搭配的样式.. 总之也就这个样子
好像折腾不够, 不然应该匹配`hsl(0,0%,0%)`之类连颜色之类也标记一下..
我大致写了代码的代码, 希望有用处吧, 当然对自己是有用了

另外一份里面我是设想#代码用缩进, 注释用顶格#的, 这里..
`CoffeeScript`是不能这样了, 我也只能在标记的时候用用
目前细节不知道如何处理的好, 先放上已经完成的部分加图片吧

这个函数用来递归处理文档的缩进, 把缩进转化为数组层级
  make_array = (arr) ->
    scope_lines = []

先判断行的特征, 将缩进部分单独压入列表
    for line in arr
      last_index = scope_lines.length - 1

      if last_index < 0
        scope_lines.push line.trimRight()
      else
        empty_line = line.match /^\s*$/
        if empty_line?
          if (typeof scope_lines[last_index]) is 'object'
            scope_lines[last_index].push ''
          else
            scope_lines.push ''
        else
          code_line = line.match /^\s\s.+$/
          if code_line?
            if (typeof scope_lines[last_index]) is 'object'
              scope_lines[last_index].push line[2..]
            else
              scope_lines.push [line[2..]]
          else
            scope_lines.push line

对压入列表的部分尝试递归
    output_array = []
    for item in scope_lines
      if (typeof item) is 'object'
        output_array.push (make_array item)
      else
        output_array.push item

    output_array

对每一行的标记, 一些符号对于网页的转化
  mark_line = (line) ->
    line.replace(/>/g,'&gt;')
      .replace(/</g,'&lt')
      .replace(/\t/g,'&nbsp;')
      .replace(/\s/g, '&nbsp;')
      .replace(/('[^(\\')]+[^\\]')/, '<span class="string">$1</span>')

顶格为注释行, 当中有些多的样式
  comment_line = (line) ->
    line.replace(/`([^`]*[^\\`]+)`/g, '<code class="inline_code">$1</code>')
      .replace(/(https?:(\/\/)?\S+)/g, '<a href="$1">$1</a>')
      .replace(/#(\w+)#/g, '<span class="bold">$1</span>')

产生`HTML`过程中递归解析列表
  make_html = (arr) ->
    html = ''
    for line in arr
      if typeof line is 'object'
        html += "<div class='code_block'>#{make_html line}</div>"
      else
        if line is '' then line = '&nbsp;'
        line = mark_line line
        html += "<p class='code_line'>#{line}</p>"
    html

测试用过的缩进
  data = """
  dd1`rewr`
  http:google.com

  sfsdf
    sdfsdfs`fgdf`
      sdfsdfs
        ff
      dfg

      dgd
    dd
  sdfsdfs '55555'

  sdgs
  sg sfg
  """

这个函数用来生成页面
  make_page = (arr) ->
    html = '<style>
      *{
        -webkit-box-sizing: border-box;
        box-sizing: border-box;
      }
      #lx_page{
        margin: 13px 26px;
        -webkit-box-shadow: 1px 2px 20px #ddc;
        width: 800px;
        padding: 6px;
      }
      .code_block{
        width: 800px;
        background-color: white;
        margin-left: 17px;
        -webkit-box-shadow: 1px 2px 20px #ddc ;
        padding: 0px 0px 0px 2px;
        margin-top: 1px;
      }
      .code_line, .comment_line{
        line-height: 24px;
        font-size: 13px;
        margin: 0px;
      }
      .code_line{
        font-family: monospace;
      }
      .comment_line{
        font-family: wequanyi micro hei;
        color: hsl(0,80%,80%);
      }
      a{
        text-decoration: none;
        -webkit-box-shadow: 1px 2px 10px #daa;
        background-color: hsla(300,80%,80%,0.2);
      }
      .string{
        background-color: hsla(0,80%,80%,0.2);
        -webkit-box-shadow: 1px 2px 10px #daa;
      }
      .inline_code{
        background-color: hsla(20,90%,80%,0.2);
        -webkit-box-shadow: 1px 2px 10px #daa;
      }
      .bold{
        font-weight: bold;
      }
      </style>'
    for line in arr
      if typeof line is 'object'
        html += "<div class='code_block'><code>#{make_html line}</code></div>"
      else
        if line is '' then line = '&nbsp;'
        line = comment_line (mark_line line)
        html += "<p class='comment_line'>#{line}</p>"
    "<div id='lx_page'>#{html}</div>"

测试输出, 注释掉了
  # console.log make_page (make_array (data.split '\n'))

如果可以, 就`export`成为模块
  if typeof exports is 'object'
    exports.lx = (str) ->
      arr = str.split '\n'
      make_page (make_array arr)
